{"pageProps":{"metaData":{"title":"ReactNative Put方式上传文件","description":"ReactNative Put方式上传文件","tags":["RN","PUT"],"keywords":["RN"],"id":"rn-putfile","create":1682419800709,"lastUpdate":1687689226484},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"React Native Put方式文件上传\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"之前项目一直采用的后端上传，RN将文件使用FormData的形式传递给后端，为了解决文件过大的原因，采用RN使用PUT直接将文件上传至图片服务器;\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"/**\\n * 图片上传请求工具\\n * @param beforeUpload \\n * @param afterUpload \\n * @returns \\n */\\nexport default async function UploadFileToOSS(\\n    fileData: FileInfo,\\n    beforeUpload: () => Promise<{ uploadUrl: string, key: string }>,\\n    afterUpload: (key: string) => Promise<string>) {\\n\\n    // 1. 获取上传地址和key\\n    let { uploadUrl, key } = await beforeUpload();\\n\\n    // fetch 为React Native 系统api\\n    await fetch(uploadUrl, {\\n        method: 'PUT',\\n        body: {\\n            uri: fileData.uri\\n        },\\n        headers: {\\n            'Content-Type': fileData.type\\n        }\\n    })\\n\\n    // 3. 使用key换取上传地址\\n    if (typeof afterUpload === 'function') {\\n        return await afterUpload(key)\\n    }\\n\\n    return key;\\n}\\n\\ntype FileInfo = {\\n    name: string\\n    uri: string\\n    type: string\\n    base64: string\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}