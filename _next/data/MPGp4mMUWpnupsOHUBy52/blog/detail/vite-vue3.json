{"pageProps":{"metaData":{"title":"vue3 学习","description":"vue3搭建一个小项目，项目用于公司零售柜价格设置。项目选型之所以选vue3，主要是用了我之前很久远的一个Vue2脚手架,写起来有点膈手，外加上vue3在国内火，想着是小项目就随便我折腾了。","tags":["Vue3"],"keywords":["Vue3"],"id":"vite-vue3","create":1682416219032,"lastUpdate":1682652186959},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"vue3 学习\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vue3搭建一个小项目，项目用于公司零售柜价格设置。项目选型之所以选vue3，主要是用了我之前很久远的一个Vue2脚手架,写起来有点膈手，外加上vue3在国内火，想着是小项目就随便我折腾了\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"首先去搜索引擎找了一个脚手架vite,一路enter就好了。对了vue3的全局状态管理推荐用\", _jsx(_components.strong, {\n        children: \"pinia\"\n      }), \"了，狗头保命...之前我都没听说这个玩意\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"npm create vite@latest\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"创建完了，跑起项目就 可以看到\\\"Hello World\\\"了。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我这边是一个H5项目，需要做屏幕适配。所以 \", _jsx(_components.code, {\n        children: \"postcss-pxtorem\"\n      }), \"+ \", _jsx(_components.code, {\n        children: \"autoprefixer\"\n      }), \"+\", _jsx(_components.code, {\n        children: \"amfe-flexible\"\n      }), \" install到项目里，然后按照demo配置一下。最主要的就是\", _jsx(_components.code, {\n        children: \"rootValue\"\n      }), \"这个属性，设计稿除以10\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-JS:.postcssrc.cjs\",\n        children: \" module.exports = {\\n  plugins: {\\n    autoprefixer: {\\n      Browserslist: [\\\"Android >= 4.0\\\", \\\"iOS >= 7\\\"],\\n    },\\n    \\\"postcss-pxtorem\\\": {\\n      rootValue: 37.5, //结果为：设计稿元素尺寸/37.5，比如元素宽375px,最终页面会换算成 10rem\\n      propList: [\\\"*\\\"],\\n      // 黑名单\\n      // selectorBlackList: [\\n      //   'van-'\\n      // ],\\n    },\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"UI整的是\", _jsx(_components.code, {\n        children: \"Vant\"\n      }), \",为什么用这个，我也很纳闷，设计又不按照这个UI组件设计，领导又让用这个库，总之项目Ui自定义高就别用什么组件了,自己费尽整一套就好，\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最后整个\", _jsx(_components.code, {\n        children: \"axios\"\n      }), \"和css预编译,框框就差不多了。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"接着就是看一下Vue APi 配方和以前大差不差。以前很讨厌vue整一个大对象，把所有的东西都塞里面，看起来很廉价。现在这个组合式的感觉像是那么回事了。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"defineProps\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"defineEmit\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"defineProps\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"watch\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"watEffect\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ref\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"reactive\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"computed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"...\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"对了我的编辑器是vscode,如果要用vue3 就不要用\", _jsx(_components.code, {\n        children: \"vuter\"\n      }), \"了提示支持不友好，新的插件\", _jsx(_components.code, {\n        children: \"volar\"\n      }), \"，如果vscode下载不下来就需要去官网下载，把包里package.json vscode版本改的和自己编辑器的版本一眼,再手动安装,详细教程搜索引擎自取。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"中间碰到一个很恶心的事情,Vant的组件有很多自定义css样式,想全局修改。index.html修改失败，按照官网的:root:root也不行，最后就整了一个js文件在入口统一修改...囧\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-JS\",\n        children: \"  export function updateVantCSSVar() {\\n    let cssVar = [\\n      ['--van-tabs-bottom-bar-color', '#FF7500'],\\n      ['--van-tabs-nav-background', 'transparent'],\\n      ['--van-field-label-width', '5.5em'],\\n    ]\\n\\n    cssVar.forEach(item => {\\n      document.documentElement.style.setProperty(item[0], item[1])\\n    })\\n  }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"顺路又学了一下less定义全局变量\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-JS:VITE.CONFIG.JS\",\n        children: \"// VITE.CONFIG.JS\\nexport default defineConfig(({ mode }) => {\\n  return {\\n    css: {\\n      preprocessorOptions: {\\n        less: {\\n          modifyVars: {\\n            // 这个用来定义全局变量的\\n            hack: `true; @import \\\"${path.resolve(__dirname, \\\"./src/assets/css/base.less\\\")}\\\"`\\n            // '--van-field-label-width': '6.3em'\\n          },\\n          globalVars: {\\n\\n          },\\n        }\\n      }\\n    }\\n  }\\n})\\n\\n  //base.less\\n  @test-color: red;\\n  @goods-img: 60px;\\n  @yellow: #FF7500;\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最后打包，默认的是\", _jsx(_components.code, {\n        children: \"/\"\n      }), \",建议配置 \", _jsx(_components.code, {\n        children: \"base\"\n      }), \"为\", _jsx(_components.code, {\n        children: \"./\"\n      }), \",不然如果项目不是在根目录就找不到静态资源了。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"碰到的糟心问题\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"白屏\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"如果任何报错都没有,建议检查router的模式是否用的是\", _jsx(_components.code, {\n            children: \"history\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"ts中引入Vue文件报错\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ts:sfc.d.ts\",\n            children: \"  //增加一个 sfc.d.ts\\n  declare module '*.vue' {\\n    import { ComponentOptions } from 'vue'\\n    const componentOptions: ComponentOptions\\n    export default componentOptions\\n  }\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"vconsole引入\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-JS:main.ts\",\n            children: \"  if (import.meta.env.MODE !== 'prod') {\\n\\n    // 网上的教程大多是下面这种引入，实际上会报错\\n    app.use(new Vconsole())\\n\\n    // 以下引入可以正常使用\\n    new Vconsole()\\n\\n    // 这种也可以\\n    app.use(()=>new Vconsole())\\n  }\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"部分浏览器黑屏兼容问题,版本较低的浏览器不支持ES6的语法和新API，而Babel默认只转换新的JavaScript句法，不转换新的API，比如Proxy、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法都不会转码。\"\n        }), \"\\n\", _jsxs(_components.blockquote, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"yarn add @vitejs/plugin-legacy terser\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ts:vite.config.ts\",\n            children: \"  import legacy from '@vitejs/plugin-legacy'\\n  export default defineConfig(({ mode }) => {\\n    return {\\n      plugins: [\\n        legacy({\\n          targets: ['defaults', 'ie >= 11', 'chrome 52'],  //需要兼容的目标列表，可以设置多个\\n          additionalLegacyPolyfills: ['regenerator-runtime/runtime'],\\n          renderLegacyChunks: true,\\n          polyfills: [\\n            'es.symbol',\\n            'es.array.filter',\\n            'es.promise',\\n            'es.promise.finally',\\n            'es/map',\\n            'es/set',\\n            'es.array.for-each',\\n            'es.object.define-properties',\\n            'es.object.define-property',\\n            'es.object.get-own-property-descriptor',\\n            'es.object.get-own-property-descriptors',\\n            'es.object.keys',\\n            'es.object.to-string',\\n            'web.dom-collections.for-each',\\n            'esnext.global-this',\\n            'esnext.string.match-all'\\n          ]\\n        })\\n      ],\\n      resolve: {\\n        alias: {\\n          '@': path.resolve(__dirname, 'src'),\\n        },\\n      },\\n      server: { },\\n      css: { }\\n    }\\n  })\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"xing2233333\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}