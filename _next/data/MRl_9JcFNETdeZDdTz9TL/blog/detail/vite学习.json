{"pageProps":{"metaData":{"title":"vite学习","description":"vite学习","tags":["vite"],"keywords":["vite"],"id":"vite学习","create":1687144350874,"lastUpdate":1692153928593},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"vite学习\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vite（法语意为 \\\"快速的\\\"，发音 /vit/，发音同 \\\"veet\\\"）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://cn.vitejs.dev/\",\n        children: \"vite官网\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"社区模板初始化\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"npm create vite@latest\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"vite.config.ts配置\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"路径别名\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"import { defineConfig } from 'vite'\\nimport path from 'path'\\nexport default defineConfig({\\n  resolve: {\\n    alias: {\\n      '@': path.resolve(__dirname, 'src'),\\n    },\\n    extensions: ['.js', '.vue', '.json'], // vue项目配置\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"配合typescript需要在tsconfig同步配置\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json:tsconfig.json\",\n        children: \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"baseUrl\\\": \\\".\\\",\\n    \\\"paths\\\": {\\\"@/*\\\":[\\\"src/*\\\"]},\\n  },\\n  \\\"include\\\": [\\\"src/**/*.ts\\\", \\\"src/**/*.d.ts\\\", \\\"src/**/*.tsx\\\", \\\"src/**/*.vue\\\",\\\"@types/*.d.ts\\\"],\\n  \\\"references\\\": [{ \\\"path\\\": \\\"./tsconfig.node.json\\\" }]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"代码压缩\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"import { defineConfig } from 'vite'\\nimport path from 'path'\\nimport viteCompression from 'vite-plugin-compression'\\nexport default defineConfig({\\n  plugins: [viteCompression()],\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"需要nginx配合\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# 开启gzip\\ngzip on;\\n\\n# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩\\ngzip_min_length 1k;\\n\\n# gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明\\ngzip_comp_level 1;\\n\\n# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。\\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;\\n\\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\\ngzip_vary on;\\n\\n# 禁用IE 6 gzip\\ngzip_disable \\\"MSIE [1-6]\\\\.\\\";\\n\\n# 设置压缩所需要的缓冲区大小\\ngzip_buffers 32 4k;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"公共依赖打包成一个文件\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"  import { defineConfig } from 'vite'\\n  export default defineConfig({\\n    build: {\\n      outDir: \\\"../q/src/main/resources/static\\\",\\n      manifest: true,\\n      emptyOutDir: true,\\n      minify:\\\"terser\\\",\\n      terserOptions: {\\n        compress: {\\n          drop_console: true,\\n          drop_debugger: true,\\n        },\\n      },\\n      chunkSizeWarningLimit: 1000,\\n      rollupOptions: {\\n        output: {\\n          entryFileNames: 'assets/entry/[name][hash].js',\\n          chunkFileNames: 'assets/chunk/[name][hash].js',\\n          assetFileNames: 'assets/file/[name][hash].[ext]',\\n          manualChunks(id) {\\n            const NODE_MODULES = 'node_modules'\\n            if (id.includes(NODE_MODULES)) return 'vendor'\\n          },\\n        },\\n      }\\n    },\\n  })\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"server配置\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"  import { defineConfig } from 'vite'\\n  export default defineConfig({\\n    server: {\\n      host: \\\"0.0.0.0\\\",\\n      port:\\\"3000\\\",// 默认5173\\n      proxy: {\\n        // 字符串简写写法：http://localhost:5173/foo -> http://localhost:4567/foo\\n        '/foo': 'http://localhost:4567',\\n        // 带选项写法：http://localhost:5173/api/bar -> http://jsonplaceholder.typicode.com/bar\\n        '/api': {\\n          target: 'http://jsonplaceholder.typicode.com',\\n          changeOrigin: true,\\n          rewrite: (path) => path.replace(/^\\\\/api/, ''),\\n        },\\n        // 正则表达式写法：http://localhost:5173/fallback/ -> http://jsonplaceholder.typicode.com/\\n        '^/fallback/.*': {\\n          target: 'http://jsonplaceholder.typicode.com',\\n          changeOrigin: true,\\n          rewrite: (path) => path.replace(/^\\\\/fallback/, ''),\\n        },\\n        // 使用 proxy 实例\\n        '/api': {\\n          target: 'http://jsonplaceholder.typicode.com',\\n          changeOrigin: true,\\n          configure: (proxy, options) => {\\n            // proxy 是 'http-proxy' 的实例\\n          }\\n        },\\n        // 代理 websockets 或 socket.io 写法：ws://localhost:5173/socket.io -> ws://localhost:5174/socket.io\\n        '/socket.io': {\\n          target: 'ws://localhost:5174',\\n          ws: true,\\n        },\\n      },\\n    }\\n  })\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"浏览器兼容\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript:vite.config.ts\",\n        children: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\nimport legacy from '@vitejs/plugin-legacy'\\nexport default defineConfig({\\n  plugins: [\\n    vue(),\\n    legacy({\\n      targets: ['defaults', 'ie >= 11', 'chrome 52'],  //需要兼容的目标列表，可以设置多个\\n      additionalLegacyPolyfills: ['regenerator-runtime/runtime'],\\n      renderLegacyChunks: true,\\n      polyfills: [\\n        'es.symbol',\\n        'es.array.filter',\\n        'es.promise',\\n        'es.promise.finally',\\n        'es/map',\\n        'es/set',\\n        'es.array.for-each',\\n        'es.object.define-properties',\\n        'es.object.define-property',\\n        'es.object.get-own-property-descriptor',\\n        'es.object.get-own-property-descriptors',\\n        'es.object.keys',\\n        'es.object.to-string',\\n        'web.dom-collections.for-each',\\n        'esnext.global-this',\\n        'esnext.string.match-all'\\n      ]\\n    })\\n  ],\\n})\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}