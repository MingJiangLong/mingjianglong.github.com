{"pageProps":{"metaData":{"title":"NextJS script引入","description":"在nextjs 如何使用script","tags":["NextJS"],"keywords":["NextJS"],"create":1683697866995,"lastUpdate":1689062296042,"id":"NextJS使用script引入"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"NextJS 使用script引入\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如今模块化的前端，开发过程中的所需要的模块一般都可以使用\", _jsx(_components.code, {\n        children: \"npm\"\n      }), \"来进行管理,\", _jsx(_components.code, {\n        children: \"npm\"\n      }), \"不仅能够方便我们管理资源的版本，同时还能解决手动script引入顺序等诸多问题。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果在\", _jsx(_components.code, {\n        children: \"nextjs\"\n      }), \"中我们想手动引入一个脚本要如何做？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一般前端项目都是通过入口文件将我们所有的前端文件打成一个或者多个js文件然后在html文件引入，在nextjs中也是一样,我们只需要在\", _jsx(_components.code, {\n        children: \"_app.tsx\"\n      }), \"文件中引入就可以。\\n部分脚手架搭建的next项目可能没有该文件，在root下创建该文件\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"以下是nextjs手动引入\", _jsx(_components.code, {\n        children: \"vconsole\"\n      }), \"示例\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx:_app.tsx\",\n        children: \"import type { AppProps } from \\\"next/app\\\"\\nimport Script from \\\"next/script\\\"\\nexport default function App({ Component, pageProps }: AppProps) {\\n  return (\\n    <>\\n      <Component {...pageProps} />\\n      <Script\\n        src=\\\"https://unpkg.com/vconsole@latest/dist/vconsole.min.js\\\"\\n        // strategy=\\\"beforeInteractive\\\"\\n        onLoad={() => {\\n          new window.VConsole()\\n        }}\\n      />\\n    </>\\n  )\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}