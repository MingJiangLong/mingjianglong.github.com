{"pageProps":{"metaData":{"title":"Vite打包","description":"Vite 打包配置学习","tags":["Vite"],"keywords":["Vite"],"id":"vite-config","create":1682495747004,"lastUpdate":1689062296047},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Vite打包\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vite.config.js配置文件选项注释说明\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts:vite.config.ts\",\n        children: \"import { defineConfig } from \\\"vite\\\";\\nimport vue from \\\"@vitejs/plugin-vue\\\";\\nimport path from \\\"path\\\";\\nexport default defineConfig({\\n\\n  //项目根目录\\n  root: process.cwd(),\\n  \\n  //项目部署的基础路径\\n  base: \\\"/\\\",\\n  \\n  //环境配置 'development'|'production'\\n  mode: \\\"development\\\",\\n  \\n  //全局常量替换 Record<string, string>\\n  define: {\\n    \\\"\\\": \\\"\\\",\\n    user: \\\"users\\\",\\n  },\\n  \\n  //插件\\n  plugins: [vue()],\\n  \\n  //静态资源服务的文件夹\\n  publicDir: \\\"public\\\",\\n  \\n  //存储缓存文件的目录\\n  cacheDir: \\\"node_modules/.vite\\\",\\n  \\n  resolve: {\\n    //别名\\n    alias: {\\n      \\\"@\\\": path.resolve(__dirname, \\\"/src\\\"),\\n    },\\n    dedupe: [],\\n\\n    //解决程序包中package.json配置中的exports 字段\\n    conditions: [],\\n    \\n    //解析package.json中字段的优先级\\n    mainFields: [\\\"module\\\", \\\"jsnext:main\\\", \\\"jsnext\\\"],\\n    \\n    //导入时想要省略的扩展名列表\\n    extensions: [\\\".mjs\\\", \\\".js\\\", \\\".ts\\\", \\\".jsx\\\", \\\".tsx\\\", \\\".json\\\"],\\n    \\n    //使Vite通过原始文件路径而不是真正的文件路径确定文件身份\\n    preserveSymlinks: false,\\n  },\\n  css: {\\n    \\n    //配置 CSS modules 的行为。选项将被传递给 postcss-modules。\\n    modules: {},\\n    \\n    // PostCSS 配置（格式同 postcss.config.js）\\n    // postcss-load-config 的插件配置\\n    postcss: {},\\n    \\n    //指定传递给 CSS 预处理器的选项\\n    preprocessorOptions: {\\n      scss: {\\n        additionalData: `$injectedColor: orange;`,\\n      },\\n    },\\n    \\n    //开发过程中是否启sourcemap\\n    devSourcemap: false,\\n  },\\n  json: {\\n   \\n    //是否支持从 .json 文件中进行按名导入\\n    namedExports: true,\\n   \\n    //若设置为 true，导入的 JSON 会被转换为 export default JSON.parse(\\\"...\\\") 会比转译成对象字面量性能更好，\\n    stringify: false,\\n  },\\n  \\n  //继承自 esbuild 转换选项。最常见的用例是自定义 JSX\\n  esbuild: {\\n    jsxFactory: \\\"h\\\",\\n    jsxFragment: \\\"Fragment\\\",\\n    jsxInject: `import React from 'react'`,\\n  },\\n  \\n  //静态资源处理  字符串|正则表达式\\n  assetsInclude: [\\\"**/*.gltf\\\"],\\n  \\n  //调整控制台输出的级别 'info' | 'warn' | 'error' | 'silent'\\n  logLevel: \\\"info\\\",\\n  \\n  //设为 false 可以避免 Vite 清屏而错过在终端中打印某些关键信息\\n  clearScreen: true,\\n  \\n  //加载 .env 文件的目录\\n  envDir: \\\"\\\",\\n  \\n  //envPrefix开头的环境变量会通过import.meta.env暴露客户端源码\\n  envPrefix: \\\"VITE_\\\",\\n  \\n  //设置'spa' | 'mpa' | 'custom'应用操作\\n  appType: \\\"spa\\\",\\n  \\n  //服务\\n  server: {\\n  \\n    //服务器主机名\\n    host: \\\"localhost\\\",\\n  \\n    //端口号\\n    port: \\\"5173\\\",\\n  \\n    //设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口\\n    strictPort: true,\\n  \\n    //https.createServer()配置项\\n    https: \\\"\\\",\\n  \\n    //服务器启动时自动在浏览器中打开应用程序。\\n    open: \\\"/docs/index.html\\\",\\n  \\n    //自定义代理规则\\n    proxy: {\\n  \\n      // 字符串简写写法\\n      \\\"/foo\\\": \\\"http://localhost:4567\\\",\\n  \\n      // 选项写法\\n      \\\"/api\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        rewrite: (path) => path.replace(/^\\\\/api/, \\\"\\\"),\\n      },\\n  \\n      // 正则表达式写法\\n      \\\"^/fallback/.*\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        rewrite: (path) => path.replace(/^\\\\/fallback/, \\\"\\\"),\\n      },\\n  \\n      // 使用 proxy 实例\\n      \\\"/api\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        configure: (proxy, options) => {\\n          // proxy 是 'http-proxy' 的实例\\n        },\\n      },\\n  \\n      // Proxying websockets or socket.io\\n  \\n      \\\"/socket.io\\\": {\\n        target: \\\"ws://localhost:3000\\\",\\n        ws: true,\\n      },\\n    },\\n  \\n    //开发服务器配置 CORS\\n    cors: {},\\n  \\n    //指定服务器响应的 header ,类型OutgoingHttpHeaders\\n    header: {},\\n  \\n    //禁用或配置 HMR 连接\\n    hmr: {},\\n  \\n    //传递给 chokidar 的文件系统监视器选项\\n    watch: {},\\n  \\n    //中间件模式创建 Vite 服务器,'ssr' | 'html'\\n    middlewareMode: \\\"ssr\\\",\\n  \\n    //HTTP请求中预留此文件夹，用于代理 Vite 作为子文件夹时使用。\\n    base: \\\"\\\",\\n  \\n    fs: {\\n      //限制为工作区 root 路径以外的文件的访问\\n      strict: true,\\n      //限制哪些文件可以通过 /@fs/ 路径提供服务\\n      allow: [\\n        // 搜索工作区的根目录\\n        searchForWorkspaceRoot(process.cwd()),\\n        // 自定义规则\\n        \\\"/path/to/custom/allow\\\",\\n      ],\\n  \\n      //限制Vite开发服务器提供敏感文件的黑名单\\n      deny: [\\\".env\\\", \\\".env.*\\\", \\\"*.{pem,crt}\\\"],\\n    },\\n  \\n    //定义开发调试阶段生成资产的url\\n    origin: \\\"http://127.0.0.1:8080\\\",\\n  },\\n  \\n  //构建\\n  build: {\\n  \\n    //浏览器兼容性  \\\"esnext\\\"|\\\"modules\\\"\\n    target: \\\"modules\\\",\\n  \\n    //否自动注入 module preload 的 polyfill\\n    polyfillModulePreload: true,\\n  \\n    //输出路径\\n    outDir: \\\"dist\\\",\\n  \\n    //生成静态资源的存放路径\\n    assetsDir: \\\"assets\\\",\\n  \\n    //小于此阈值的导入或引用资源将内联为 base64 编码，以避免额外的 http 请求。设置为 0 可以完全禁用此项\\n    assetsInlineLimit: 4096,\\n  \\n    //启用/禁用 CSS 代码拆分\\n    cssCodeSplit: true,\\n  \\n    //不同的浏览器target设置CSS的压缩\\n    cssTarget: \\\"\\\",\\n  \\n    //构建后是否生成 source map 文件\\n    //boolean | 'inline' | 'hidden'\\n    sourcemap: false,\\n    \\n    //自定义底层的 Rollup 打包配置\\n    rollupOptions: {\\n    \\n      //要打包的文件路径\\n      input: \\\"src/main.js\\\",\\n    \\n      //文件输出位置\\n      output: {\\n    \\n        //打包生产文件路径\\n        file: \\\"dist/index.js\\\",\\n    \\n        //打包输出格式\\n        // \\\"amd\\\", \\\"cjs\\\", \\\"system\\\", \\\"es\\\", \\\"iife\\\" or \\\"umd\\n        format: \\\"cjs\\\",\\n\\n        //包的全部变量名称\\n        name: \\\"bundleName\\\",\\n\\n        //声明全局变量\\n        globals: {\\n          jquery: \\\"$\\\",\\n        },\\n      },\\n\\n      //插件\\n      plugins: [],\\n\\n      //不需打包的文件\\n      external: [\\\"lodash\\\"],\\n    },\\n\\n    //@rollup/plugin-commonjs 插件的选项\\n    commonjsOptions: {},\\n\\n    //@rollup/plugin-dynamic-import-vars 选项\\n    dynamicImportVarsOptions: {},\\n\\n    //构建的库\\n    lib: {\\n      entry: path.resolve(__dirname, \\\"lib/main.js\\\"),\\n\\n      //暴露的全局变量\\n      name: \\\"mylib\\\",\\n\\n      //'es' | 'cjs' | 'umd' | 'iife'\\n      formats: \\\"es\\\",\\n\\n      //输出的包文件名\\n      fileName: \\\"my-lib\\\",\\n    },\\n\\n    //当设置为 true，构建后将会生成 manifest.json 文件\\n    manifest: false,\\n\\n    //当设置为 true，构建后将会生成SSR的manifest.json 文件\\n    ssrManifest: false,\\n\\n    //生成面向 SSR 的构建\\n    ssr: \\\"undefined\\\",\\n\\n    //设置为 false 可以禁用最小化混淆，\\n    //boolean | 'terser' | 'esbuild'\\n    minify: \\\"esbuild\\\",\\n\\n    //传递给 Terser 的更多 minify 选项。\\n    terserOptions: {},\\n\\n    //设置为 false 来禁用将构建后的文件写入磁盘\\n    write: true,\\n\\n    //默认情况下，若 outDir 在 root 目录下，则 Vite 会在构建时清空该目录。\\n    emptyOutDir: true,\\n\\n    //启用/禁用 gzip 压缩大小报告\\n    reportCompressedSize: true,\\n\\n    //触发警告的 chunk 大小（以 kbs 为单位）\\n    chunkSizeWarningLimit: 500,\\n\\n    //设置为 {} 则会启用 rollup 的监听器\\n    watch: null,\\n  },\\n\\n  //开发服务器\\n  preview: {\\n\\n    //开发服务器主机名\\n    host: \\\"localhost\\\",\\n\\n    //开发服务器端口号\\n    port: \\\"5173\\\",\\n\\n    //设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口\\n    strictPort: true,\\n\\n    //https.createServer()配置项\\n    https: \\\"\\\",\\n\\n    //服务器启动时自动在浏览器中打开应用程序。\\n    open: \\\"/docs/index.html\\\",\\n\\n    //开发服务器，自定义代理规则\\n    proxy: {\\n      // 字符串简写写法\\n      \\\"/foo\\\": \\\"http://localhost:4567\\\",\\n      // 选项写法\\n      \\\"/api\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        rewrite: (path) => path.replace(/^\\\\/api/, \\\"\\\"),\\n      },\\n      // 正则表达式写法\\n      \\\"^/fallback/.*\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        rewrite: (path) => path.replace(/^\\\\/fallback/, \\\"\\\"),\\n      },\\n      // 使用 proxy 实例\\n      \\\"/api\\\": {\\n        target: \\\"http://jsonplaceholder.typicode.com\\\",\\n        changeOrigin: true,\\n        configure: (proxy, options) => {\\n          // proxy 是 'http-proxy' 的实例\\n        },\\n      },\\n      // Proxying websockets or socket.io\\n      \\\"/socket.io\\\": {\\n        target: \\\"ws://localhost:3000\\\",\\n        ws: true,\\n      },\\n    },\\n    //开发服务器配置 CORS\\n    cors: {},\\n  },\\n\\n  //依赖优化选项\\n  optimizeDeps: {\\n\\n    //检测需要预构建的依赖项\\n    entries: [],\\n\\n    //预构建中强制排除的依赖项\\n    exclude: [\\\"jquery\\\"],\\n\\n    //默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。\\n    include: [],\\n\\n    //部署扫描和优化过程中传递给EsBuild\\n    esbuildOptions: {},\\n\\n    //设置为 true 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖\\n    force: true,\\n  },\\n\\n  //SSR 选项\\n  ssr: {\\n\\n    //列出的是要为 SSR 强制外部化的依赖\\n    external: [],\\n\\n    //列出的是防止被 SSR 外部化依赖项。\\n    noExternal: [],\\n\\n    //SSR 服务器的构建目标\\n    target: \\\"node\\\",\\n\\n    //SSR 服务器的构建语法格式 'esm' | 'cjs'\\n    format: \\\"esm\\\",\\n  },\\n  worker: {\\n\\n    //worker 打包时的输出类型 'es' | 'iife'\\n    format: \\\"iife\\\",\\n\\n    // worker 打包的 Vite 插件\\n    plugins: [],\\n\\n    //打包 worker 的 Rollup 配置项\\n    rollupOptions: {},\\n  },\\n});\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}