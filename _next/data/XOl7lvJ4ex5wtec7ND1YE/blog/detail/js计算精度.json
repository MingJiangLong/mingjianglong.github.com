{"pageProps":{"metaData":{"title":"js计算精度","description":"js计算精度","tags":["typescript"],"keywords":["typescript"],"id":"js计算精度","create":1689302190703,"lastUpdate":1692955490158},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"js计算精度问题整理\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"问题\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"线上的出现的一个问题：用户钱包余额显示有4.60元，但是无法进行支付，查看后端日志发现前端传给后端的值是459(pass:前端需要将元转换成分，即乘以100)\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"原因\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"javascript的浮点数运算采用了\", _jsx(_components.code, {\n        children: \"IEEE 754 双精度（64位）浮点运算规则\"\n      }), \"，在浮点数转化成二进制的时候因为位数限制会舍弃部分值造成精度问题。\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"什么是IEEE754\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"IEEE二进制浮点数算术标准IEEE 754是20世纪80年代以来最广泛使用的浮点数运算标准。\\nIEEE 754规定了四种表示浮点数值的方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80位实现）。其中javascript采用的是 双精度（64位）浮点运算规则。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"解决方案\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"小数转化为整数再进行计算(还是会有部分精度问题)。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"成熟的库（Decimaljs、 Bignumber）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"字符串自己实现计算逻辑\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}