{"pageProps":{"metaData":{"title":"友宝支付宝扫码支付","description":"公司需要在现有售货机上需要在售货机支付宝扫码支付上使用企业福利钱包","tags":["支付"],"keywords":["支付"],"id":"支付宝扫码支付","create":1687337636375,"lastUpdate":1692953641180},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"支付宝扫码支付总结\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"流程\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"用户扫码之后,后端重定向进入对应支付宝h5页面，用户选择钱包点击支付按钮。前端根据对应信息(商品信息、优惠信息、钱包信息等)获取交易号并且根据该交易号拉起支付宝收银台，在收到支付宝支付回调之后，将相应的支付状态上报后端,根据上报结果判断是否展示广告,至此结束。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"问题点\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"前端技术栈\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"前端选择的是Vue3。项目很小,前面版本使用原生开发,后面迭代了两个版本,受够了dom操作繁琐,重构为Vue(避免了开发人员dom操作,就不得不将Vue运行时打包进项目,也算是一种取舍吧)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"是否前后端分离\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"最终选择是前后不分离(实际上开发还是分离),主要是考虑用户请求是否是可控的(伪造请求)。其实我们是支付宝H5的页面,可以使用支付宝的授权跳转，这样就可以使得来源可控。\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"事实证明还是要分离，不然开发过程中苦的是自己。后端再小的变动，前端都需要打包，将对应文件放在对应位置(这一步虽然可以代码完成)。然后再把项目推服务。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"加载速度(打包体积优化)\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"打包支持了gzip\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"terse minify以及移除了console\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"打包分析的时候发现decimal.js包体积很大(有部分金额计算涉及小数点,所以引入该包),对该包做了minify\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"请求合并，将第三方包打进vendor\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"还有vite默认支持的treeshaking\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"版本控制\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"hash\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}