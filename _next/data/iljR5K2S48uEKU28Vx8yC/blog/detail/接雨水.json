{"pageProps":{"metaData":{"title":"算法-接雨水","description":"算法-接雨水","tags":["算法"],"keywords":["算法"],"id":"接雨水","create":1692955612734,"lastUpdate":1702540583289},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"接雨水\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"输出：6\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"找到最高点,从最高点左右向最高点靠近并维护一个当前最大值，比当前最大值小的都可以装水\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js:接雨水\",\n        children: \"/**\\n * @param {number[]} height\\n * @return {number}\\n */\\nvar trap = function (height) {\\n    const maxValue = Math.max(...height);\\n    const maxValueIndex = height.findIndex(item => item == maxValue);\\n    let count = 0;\\n\\n    let currentMax = height[0];\\n    for (let i = 0; i < maxValueIndex; i++) {\\n        const current = height[i];\\n        if (height[i] > currentMax) {\\n            currentMax = height[i];\\n        } else {\\n            count += (currentMax - height[i])\\n        }\\n    }\\n\\n    const lastIndex = height.length - 1;\\n    currentMax = height[lastIndex];\\n    for (let i = lastIndex; i >= maxValueIndex; i--) {\\n        const current = height[i];\\n        if (height[i] > currentMax) {\\n            currentMax = height[i];\\n        } else {\\n            count += (currentMax - height[i])\\n        }\\n    }\\n\\n    return count\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}