{"pageProps":{"metaData":{"title":"vite打包白屏","description":"vue项目使用vite白屏问题","tags":["Vue3","vite"],"keywords":["Vue3","vite"],"id":"vite白屏","create":1705631674819,"lastUpdate":1705633338084},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"vite打包白屏\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"白屏黑不黑人   囧\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"可能造成的原因\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"浏览器兼容\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"增加垫片\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts:vite.config.ts\",\n        children: \"\\nimport legacy from '@vitejs/plugin-legacy'\\nexport default defineConfig(({ mode }) => {\\n  return {\\n    plugins: [\\n    legacy({\\n      targets: ['defaults', 'ie >= 11', 'chrome 52'],  //需要兼容的目标列表，可以设置多个\\n      additionalLegacyPolyfills: ['regenerator-runtime/runtime'],\\n      renderLegacyChunks: true,\\n      polyfills: [\\n        'es.symbol',\\n        'es.array.filter',\\n        'es.promise',\\n        'es.promise.finally',\\n        'es/map',\\n        'es/set',\\n        'es.array.for-each',\\n        'es.object.define-properties',\\n        'es.object.define-property',\\n        'es.object.get-own-property-descriptor',\\n        'es.object.get-own-property-descriptors',\\n        'es.object.keys',\\n        'es.object.to-string',\\n        'web.dom-collections.for-each',\\n        'esnext.global-this',\\n        'esnext.string.match-all'\\n      ]\\n    })\\n    ]\\n  }\\n})\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"打包script标签设置defer\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"项目\", _jsx(_components.code, {\n            children: \"base\"\n          }), \"设置的是一个地址。然后每次进入页面都需要刷新一次才能加载资源,也就是资源没有正常加载。查看发现vite打包之后的文件\\n资源加载标签\", _jsx(_components.code, {\n            children: \"<script type=\\\"module\\\" crossorigin src=\\\"**.js\\\"></script>\"\n          }), \",标签没有defer,导致页面加载完了，我们的js还没下载完,页面白屏。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}