{"pageProps":{"metaData":{"title":"withCredentials","description":"withCredentials","tags":["xmlhttprequest"],"keywords":["xmlhttprequest"],"id":"withCredentials","create":1705631674824,"lastUpdate":1705633338085},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"withCredentials\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"背景\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"H5接口本地开发环境正常运行，但是上到预发布环境不能收到response响应(有多个系统接口,所以接口统一走了nginx);经过排查之后发现是axios设置了withCredentials，所以来学习一下。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"什么是withCredentials\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"XMLHttpRequest.withCredentials 属性是一个布尔值，它指示了\", _jsx(_components.code, {\n        children: \"是否该使用\"\n      }), \"类似 \", _jsx(_components.code, {\n        children: \"cookie、Authorization 标头或者 TLS 客户端证书等凭据\"\n      }), \"进行\", _jsx(_components.code, {\n        children: \"跨站点访问控制\"\n      }), \"（Acess-Control）请求。设置 withCredentials \", _jsx(_components.code, {\n        children: \"对同源请求是无效\"\n      }), \"的。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"此外，这个标志还用于\", _jsx(_components.code, {\n        children: \"指示何时在响应中忽略 cookie\"\n      }), \"。默认值是 false。除非在发送 XMLHttpRequest 请求之前，将 withCredentials 设置为 true，否则来自不同域的 XMLHttpRequest 响应无法为自己的域设置 cookie 值。而通过设置 withCredentials 为 true 获得第三方 cookie，仍将遵循同源策略，因此请求的脚本无法通过 document.cookie 或者响应标头访问。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"小结\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"简单来说就是:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"设置withCredentials为true时，当前请求为跨域类型时在请求中协带cookie,同时后端需要设置Access-Control-Allow-Origin(pass:不能设置为*)和Access-Control-Allow-Credentials;\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"设置withCredentials为false时,跨域xmlhttprequest响应无法为自己的域设置 cookie 值\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}