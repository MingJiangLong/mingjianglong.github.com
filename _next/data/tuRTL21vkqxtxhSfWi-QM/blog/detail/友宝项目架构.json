{"pageProps":{"metaData":{"title":"友宝项目架构","description":"简单学习一下友宝的前端项目架构","tags":["架构"],"keywords":["架构"],"id":"友宝项目架构","create":1682416219038,"lastUpdate":1682490974618},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"友宝项目架构\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"简单学习一下友宝的前端项目架构\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"友宝的前端项目的整体架构底层技术栈选用的是PHP+React，使用PHP做为外壳，内部重定向web静态资源。web资源请求首先经过的是PHP接口,经过一系列的中间件处理(比如鉴权之类...)，最后将页面展示需要的数据通过window对象注入静态页面，然后再将静态页面返回给浏览器渲染。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"感觉整体架构的思路有点类似于服务端渲染的思想，每次页面请求都是经过的服务端接口，服务端再去决定返回什么资源，实际返回的是一个已经有数据的静态页面，但是没有经过渲染，只是有页面数据，还是需要客户端渲染。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"优点\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"前端开发不需要网络服务模块\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"服务端感知度低\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"将静态数据注入的方式，减小的客户端的压力\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"方便页面重定向，定制化页面(可以通过外壳统一做特定活动之类的)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"缺点\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"前端依赖的数据都是注入在window对象，如果window对象被后续修改将获取不到内容\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"应用场景少，只能应用于不经常变化的数据。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"前端开发BUG定位调试变得困难，开发环境虽然可mock数据，但是如果需要针对特定bug，修复bug发布之后才能看到修复结果。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"前后端耦合\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}