!function (e, r) {"object" == typeof exports && "undefined" != typeof module ?module.exports = r() :"function" == typeof define && define.amd?define(r) :(e = "undefined" != typeof globalThis ? globalThis : e || self).MDFileJsonData = r()}(this, (function () { return [{"id":8,"title":"凸包算法-地图围栏","desc":"公司零售货柜机在地图上的点需要围栏圈起来，以便显示大致范围","tag":["算法","凸包"],"content":"# 凸包算法-地图围栏\r\n\r\n公司零售货柜机在地图上的点需要围栏圈起来，以便显示大致范围\r\n\r\n\r\n\r\n<!-- [算法,凸包] -->\r\n\r\n```js\r\n\r\n/**\r\n *      p2\r\n *  p1<\r\n *      p3\r\n * 叉积判断 p1p2 p1p3\r\n * | p2.x-p1.x | p2.y-p1.y |\r\n * | p3.x-p1.x | p3.y-p1.y |\r\n * @param {{x:number,y:number}} p1 \r\n * @param {{x:number,y:number}} p2 \r\n * @param {{x:number,y:number}} p3 \r\n */\r\nfunction crossProduct(p1, p2, p3) {\r\n  return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\r\n}\r\n\r\n/**\r\n * \r\n * @param {{x:number,y:number}[]} points \r\n */\r\nfunction getConvexHull(points) {\r\n\r\n  if (points.length <= 1) { return points; }\r\n\r\n  //按照x坐标排序 \r\n  points.sort((a, b) => a.x - b.x || a.y - b.y);\r\n  let lowerHull = [];\r\n  for (let i = 0; i < points.length; i++) {\r\n    //构建下凸包\r\n\r\n    // 遍历凸包数据集判断当前点Pi是否在 H(n-2)H(n-1)的内侧(叉积<0)，如果在内侧就移除H(n-1) \r\n    while (\r\n      lowerHull.length >= 2 && \r\n      crossProduct(lowerHull[lowerHull.length - 2], lowerHull[lowerHull.length - 1], points[i]) <= 0\r\n    ) {\r\n      lowerHull.pop();\r\n    }\r\n    lowerHull.push(points[i]);\r\n  }\r\n  let upperHull = [];\r\n  for (let i = points.length - 1; i >= 0; i--) {\r\n    //构建上凸包\r\n    while (\r\n      upperHull.length >= 2 && \r\n      crossProduct(upperHull[upperHull.length - 2], upperHull[upperHull.length - 1], points[i]) <= 0) {\r\n      upperHull.pop();\r\n    }\r\n    upperHull.push(points[i]);\r\n  }\r\n  //合并上下凸包 \r\n  upperHull.pop();\r\n  lowerHull.pop();\r\n  return lowerHull.concat(upperHull);\r\n}\r\n```","createTime":1681974916831,"lastUpdateTime":1681974916831},{"id":3,"title":"Blog","desc":"记录开发日常,ε=(´ο｀*)))唉太难了，找工作总是有傻屌问我有没有blog","tag":["吐槽"],"content":"# Blog\r\n\r\n记录开发日常,ε=(´ο｀*)))唉太难了，找工作总是有傻屌问我有没有blog\r\n<!-- [吐槽] -->\r\n## Getting Started\r\n\r\n项目MD文件需要放在`/blogs`目录下，执行`/savaBlogs.js`会遍历blogs目录下所有md文件并格式化成json放在`/data/index.js`文件中;\r\nmd文件需要遵循一定的规则：\r\n* 首行标题 `# 标题`\r\n* 标题后紧跟MD文件简述 \r\n* 文章标签格式:`<!-- [标签1,标签2] -->`\r\n\r\n  ```\r\n    # 标题\r\n    我是文章描述\r\n    <!-- [标签1,标签2] -->\r\n    \r\n  ```\r\n项目运行\r\n```bash\r\nnpm install\r\nnpm run dev\r\n# or\r\nyarn dev\r\n# or\r\npnpm dev\r\n```\r\n","createTime":1680054331851,"lastUpdateTime":1681974916830,"tags":["吐槽"]},{"id":7,"title":"Git Workflow","desc":"解决开发之后需要做的事，打包上线","tag":["Git Workflow"],"content":"# Git Workflow\r\n解决开发之后需要做的事，打包上线\r\n<!-- [Git Workflow] -->\r\n\r\n在项目根目录添加 .github/workflows/integrate.yml\r\n\r\nNextJS 示例\r\n```yml\r\nname: Build and Deploy\r\non: \r\n  push:\r\n    branches:\r\n      - blog-next\r\njobs:\r\n  build-and-deploy:\r\n    # 虚拟机环境 ubuntu-latest，ubuntu-18.04或ubuntu-16.04\r\n    # windows-latest，windows-2019或windows-2016\r\n    # macOS-latest或macOS-10.14\r\n    # runs-on: ubuntu-latest\r\n    runs-on: windows-latest\r\n\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v2.3.1\r\n        with:\r\n          persist-credentials: false\r\n\r\n      - name: Cache\r\n        uses: actions/cache@v2\r\n        with:\r\n          path: ${{ github.workspace }}/.next/cache\r\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}\r\n\r\n      - name: Install and Build\r\n        uses: actions/setup-node@v1\r\n      - run: npm install\r\n      - run: npm run build\r\n      - run: npm run export\r\n        env:\r\n            CI: true\r\n      - run: touch out/.nojekyll\r\n\r\n      - name: Deploy\r\n        uses: JamesIves/github-pages-deploy-action@3.7.1\r\n        with:\r\n          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\r\n          BRANCH: lj-pages\r\n          FOLDER: out # The folder the action should deploy.\r\n          CLEAN: true # Automatically remove deleted files from the deploy branch\r\n```","createTime":1681974916733,"lastUpdateTime":1681974916733},{"id":5,"title":"NextJS打包配置学习","desc":"NextJS打包配置对应字段了解，进行简单的打包测试","tag":["Next","next.config.js"],"content":"# NextJS打包配置学习\r\n\r\nNextJS打包配置对应字段了解，进行简单的打包测试\r\n<!-- [Next,next.config.js] -->\r\n> `assetPrefix` 静态资源前缀\r\n```js\r\n  const nextConfig = {\r\n    assetPrefix:'/前缀'\r\n  }\r\n```\r\n\r\n> `Redirects` 将source原路径重定向到destination新路径，访问的是destination路径;\r\n```JS\r\n// 最终访问的是/blog路径,浏览器显示的也是blog路径\r\nconst nextConfig = {\r\n  redirects() {\r\n    return [\r\n      {\r\n        source: \"/\",\r\n        destination: \"/blog\",\r\n        permanent: true\r\n      }\r\n    ]\r\n  },\r\n}\r\n```\r\n> `Rewrites`  将原路径充当代理以此来屏蔽目标路径。浏览器显示的是destination路径，实际访问的是source路径；功能类似于**userRouter.push(path,as)**中 参数**as**的功能;\r\n```JS\r\n// 浏览器显示的是\"/blog\"，实际访问的是\"/\"路径\r\nconst nextConfig = {\r\n  async rewrites() {\r\n    return [\r\n      {\r\n        source: '/',\r\n        destination: '/blog'\r\n      }\r\n    ]\r\n  },\r\n}\r\n```","createTime":1680086962261,"lastUpdateTime":1680086962261},{"id":6,"title":"React搞笑记录","desc":"记录一些别人或者自己的React搞笑代码","tag":["React","Bug"],"content":"# React搞笑记录\r\n\r\n记录一些别人或者自己的React搞笑代码\r\n\r\n<!-- [React,Bug] -->\r\n```JS\r\n\r\n const downTime = useCallback(\r\n    () => {\r\n      let b = 0\r\n      const Time = setInterval(() => {\r\n        if (b >1) {\r\n          clearInterval(Time)\r\n          return false\r\n        }\r\n        b++\r\n        handleGetVideo()\r\n      }, 2 * 1000 * 60)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleGetVideo = () => {\r\n    getOrderVideo({ transactionId: id }).then(res => {\r\n      if (res && res.code == 200 && res.data) {\r\n        const {status,videoInfos}=res.data\r\n        if(status&&status=='FAILED'){\r\n          // ...\r\n        }else if(status&&status=='SUCCESS'&& videoInfos&&videoInfos.length){\r\n          // ...\r\n        }else if(status&&status=='QUERYING'){\r\n          setawaitState(true)\r\n          downTime()\r\n          setTimeout(() => {\r\n            setawaitState(false)\r\n          }, 2 * 1000 * 60)\r\n        }\r\n        \r\n      }\r\n    })\r\n  }\r\n```","createTime":1680086962261,"lastUpdateTime":1680086962261},{"id":2,"title":"NextJS打包相关问题","desc":"NextJS打包相关问题以及解决办法，更多参见[Next文档](https://www.nextjs.cn/)","tag":["Next","打包"],"content":"# NextJS打包相关问题\r\n\r\nNextJS打包相关问题以及解决办法，更多参见[Next文档](https://www.nextjs.cn/)\r\n<!-- [Next,打包] -->\r\n\r\n>Eslint、Ts类型校验关闭\r\n```js\r\n  // next.config.js\r\n\r\n  const nextConfig = {\r\n  \r\n    eslint:{\r\n      ignoreDuringBuilds:true\r\n    },\r\n      typescript: {\r\n      // !! WARN !!\r\n      // Dangerously allow production builds to successfully complete even if\r\n      // your project has type errors.\r\n      // !! WARN !!\r\n      ignoreBuildErrors: true,\r\n    }\r\n  }\r\n```\r\n\r\n\r\n\r\n> Image Optimization using Next.js' default loader is not compatible with `next export`.\r\n\r\n```JS\r\nmodule.exports = {\r\n  // https://github.com/vercel/next.js/issues/21079\r\n  // Remove this workaround whenever the issue is fixed\r\n  images: {\r\n    loader: 'imgix',\r\n    path: '',\r\n  },\r\n}\r\n```\r\n\r\n> 图片加载不出来","createTime":1680054331847,"lastUpdateTime":1680086543112,"tags":["Next","打包"]},{"id":4,"title":"友宝项目架构","desc":"简单学习一下友宝的前端项目架构","tag":["友宝","架构"],"content":"# 友宝项目架构\r\n简单学习一下友宝的前端项目架构\r\n\r\n<!-- [友宝,架构] -->\r\n友宝的前端项目的整体架构底层技术栈选用的是PHP+React，使用PHP做为外壳，内部重定向web静态资源。web资源请求首先经过的是PHP接口,经过一系列的中间件处理(比如鉴权之类...)，最后将页面展示需要的数据通过window对象注入静态页面，然后再将静态页面返回给浏览器渲染。\r\n\r\n感觉整体架构的思路有点类似于服务端渲染的思想，每次页面请求都是经过的服务端接口，服务端再去决定返回什么资源，实际返回的是一个已经有数据的静态页面，但是没有经过渲染，只是有页面数据，还是需要客户端渲染。\r\n\r\n优点\r\n\r\n  * 前端开发不需要网络服务模块\r\n  * 服务端感知度低\r\n  * 将静态数据注入的方式，减小的客户端的压力\r\n  * 方便页面重定向，定制化页面(可以通过外壳统一做特定活动之类的)\r\n\r\n\r\n\r\n缺点\r\n\r\n  * 前端依赖的数据都是注入在window对象，如果window对象被后续修改将获取不到内容\r\n  * 应用场景少，只能应用于不经常变化的数据。\r\n  * 前端开发BUG定位调试变得困难，开发环境虽然可mock数据，但是如果需要针对特定bug，修复bug发布之后才能看到修复结果。\r\n  * 前后端耦合\r\n","createTime":1680054331856,"lastUpdateTime":1680054331856},{"id":1,"title":"Git常用操作","desc":"git常用命令记录，主要是容易忘","tag":["git"],"content":"# Git常用操作\r\n\r\ngit常用命令记录，主要是容易忘\r\n\r\n<!-- [git] -->\r\n\r\n>`git pull -f origin master:master`\r\n  如果远程分支和本地分支代码相差太大，可以考虑用远程的覆盖本地代码","createTime":1680054331840,"lastUpdateTime":1680054331840}]}))