!function (e, r) {"object" == typeof exports && "undefined" != typeof module ?module.exports = r() :"function" == typeof define && define.amd?define(r) :(e = "undefined" != typeof globalThis ? globalThis : e || self).MDFileJsonData = r()}(this, (function () { return [{"id":9,"title":"凸包算法-地图围栏","desc":"公司零售货柜机在地图上的点需要围栏圈起来，以便显示大致范围","tag":["算法","凸包"],"content":"# 凸包算法-地图围栏\r\n\r\n公司零售货柜机在地图上的点需要围栏圈起来，以便显示大致范围\r\n\r\n\r\n\r\n<!-- [算法,凸包] -->\r\n\r\n```js\r\n\r\n/**\r\n *      p2\r\n *  p1<\r\n *      p3\r\n * 叉积判断 p1p2 p1p3\r\n * | p2.x-p1.x | p2.y-p1.y |\r\n * | p3.x-p1.x | p3.y-p1.y |\r\n * @param {{x:number,y:number}} p1 \r\n * @param {{x:number,y:number}} p2 \r\n * @param {{x:number,y:number}} p3 \r\n */\r\nfunction crossProduct(p1, p2, p3) {\r\n  return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\r\n}\r\n\r\n/**\r\n * \r\n * @param {{x:number,y:number}[]} points \r\n */\r\nfunction getConvexHull(points) {\r\n\r\n  if (points.length <= 1) { return points; }\r\n\r\n  //按照x坐标排序 \r\n  points.sort((a, b) => a.x - b.x || a.y - b.y);\r\n  let lowerHull = [];\r\n  for (let i = 0; i < points.length; i++) {\r\n    //构建下凸包\r\n\r\n    // 遍历凸包数据集判断当前点Pi是否在 H(n-2)H(n-1)的内侧(叉积<0)，如果在内侧就移除H(n-1) \r\n    while (\r\n      lowerHull.length >= 2 && \r\n      crossProduct(lowerHull[lowerHull.length - 2], lowerHull[lowerHull.length - 1], points[i]) <= 0\r\n    ) {\r\n      lowerHull.pop();\r\n    }\r\n    lowerHull.push(points[i]);\r\n  }\r\n  let upperHull = [];\r\n  for (let i = points.length - 1; i >= 0; i--) {\r\n    //构建上凸包\r\n    while (\r\n      upperHull.length >= 2 && \r\n      crossProduct(upperHull[upperHull.length - 2], upperHull[upperHull.length - 1], points[i]) <= 0) {\r\n      upperHull.pop();\r\n    }\r\n    upperHull.push(points[i]);\r\n  }\r\n  //合并上下凸包 \r\n  upperHull.pop();\r\n  lowerHull.pop();\r\n  return lowerHull.concat(upperHull);\r\n}\r\n```","createTime":1682247359454,"lastUpdateTime":1682247359454},{"id":10,"title":"友宝项目架构","desc":"简单学习一下友宝的前端项目架构","tag":["友宝","架构"],"content":"# 友宝项目架构\r\n简单学习一下友宝的前端项目架构\r\n\r\n<!-- [友宝,架构] -->\r\n友宝的前端项目的整体架构底层技术栈选用的是PHP+React，使用PHP做为外壳，内部重定向web静态资源。web资源请求首先经过的是PHP接口,经过一系列的中间件处理(比如鉴权之类...)，最后将页面展示需要的数据通过window对象注入静态页面，然后再将静态页面返回给浏览器渲染。\r\n\r\n感觉整体架构的思路有点类似于服务端渲染的思想，每次页面请求都是经过的服务端接口，服务端再去决定返回什么资源，实际返回的是一个已经有数据的静态页面，但是没有经过渲染，只是有页面数据，还是需要客户端渲染。\r\n\r\n优点\r\n\r\n  * 前端开发不需要网络服务模块\r\n  * 服务端感知度低\r\n  * 将静态数据注入的方式，减小的客户端的压力\r\n  * 方便页面重定向，定制化页面(可以通过外壳统一做特定活动之类的)\r\n\r\n\r\n\r\n缺点\r\n\r\n  * 前端依赖的数据都是注入在window对象，如果window对象被后续修改将获取不到内容\r\n  * 应用场景少，只能应用于不经常变化的数据。\r\n  * 前端开发BUG定位调试变得困难，开发环境虽然可mock数据，但是如果需要针对特定bug，修复bug发布之后才能看到修复结果。\r\n  * 前后端耦合\r\n","createTime":1682247359454,"lastUpdateTime":1682247359454},{"id":7,"title":"Blog","desc":"记录开发日常,ε=(´ο｀*)))唉太难了，找工作总是有傻屌问我有没有blog","tag":["吐槽"],"content":"# Blog\r\n\r\n记录开发日常,ε=(´ο｀*)))唉太难了，找工作总是有傻屌问我有没有blog\r\n<!-- [吐槽] -->\r\n## Getting Started\r\n\r\n项目MD文件需要放在`/blogs`目录下，执行`/savaBlogs.js`会遍历blogs目录下所有md文件并格式化成json放在`/data/index.js`文件中;\r\nmd文件需要遵循一定的规则：\r\n* 首行标题 `# 标题`\r\n* 标题后紧跟MD文件简述 \r\n* 文章标签格式:`<!-- [标签1,标签2] -->`\r\n\r\n  ```\r\n    # 标题\r\n    我是文章描述\r\n    <!-- [标签1,标签2] -->\r\n    \r\n  ```\r\n项目运行\r\n```bash\r\nnpm install\r\nnpm run dev\r\n# or\r\nyarn dev\r\n# or\r\npnpm dev\r\n```\r\n","createTime":1682247359453,"lastUpdateTime":1682247359453},{"id":8,"title":"vue3 学习","desc":"vue3搭建一个小项目，项目用于公司零售柜价格设置。项目选型之所以选vue3，主要是用了我之前很久远的一个Vue2脚手架,写起来有点膈手，外加上vue3在国内火，想着是小项目就随便我折腾了。","tag":["vue","vite","前端"],"content":"# vue3 学习\r\n\r\nvue3搭建一个小项目，项目用于公司零售柜价格设置。项目选型之所以选vue3，主要是用了我之前很久远的一个Vue2脚手架,写起来有点膈手，外加上vue3在国内火，想着是小项目就随便我折腾了。\r\n\r\n<!-- [vue,vite,前端] -->\r\n\r\n---\r\n首先去搜索引擎找了一个脚手架vite,一路enter就好了。对了vue3的全局状态管理推荐用**pinia**了，狗头保命...之前我都没听说这个玩意\r\n> npm create vite@latest\r\n\r\n创建完了，跑起项目就 可以看到\"Hello World\"了。\r\n\r\n我这边是一个H5项目，需要做屏幕适配。所以 `postcss-pxtorem`+ `autoprefixer`+`amfe-flexible` install到项目里，然后按照demo配置一下。最主要的就是`rootValue`这个属性，设计稿除以10\r\n\r\n```JS\r\n //.postcssrc.cjs\r\n module.exports = {\r\n  plugins: {\r\n    autoprefixer: {\r\n      Browserslist: [\"Android >= 4.0\", \"iOS >= 7\"],\r\n    },\r\n    \"postcss-pxtorem\": {\r\n      rootValue: 37.5, //结果为：设计稿元素尺寸/37.5，比如元素宽375px,最终页面会换算成 10rem\r\n      propList: [\"*\"],\r\n      // 黑名单\r\n      // selectorBlackList: [\r\n      //   'van-'\r\n      // ],\r\n    },\r\n  },\r\n};\r\n```\r\n\r\nUI整的是`Vant`,为什么用这个，我也很纳闷，设计又不按照这个UI组件设计，领导又让用这个库，总之项目Ui自定义高就别用什么组件了,自己费尽整一套就好，\r\n\r\n\r\n最后整个`axios`和css预编译,框框就差不多了。\r\n\r\n接着就是看一下Vue APi 配方和以前大差不差。以前很讨厌vue整一个大对象，把所有的东西都塞里面，看起来很廉价。现在这个组合式的感觉像是那么回事了。\r\n\r\n* defineProps\r\n* defineEmit\r\n* defineProps\r\n* watch\r\n* watEffect\r\n* ref\r\n* reactive\r\n* computed\r\n* ...\r\n\r\n对了我的编辑器是vscode,如果要用vue3 就不要用`vuter`了提示支持不友好，新的插件`volar`，如果vscode下载不下来就需要去官网下载，把包里package.json vscode版本改的和自己编辑器的版本一眼,再手动安装,详细教程搜索引擎自取。\r\n\r\n中间碰到一个很恶心的事情,Vant的组件有很多自定义css样式,想全局修改。index.html修改失败，按照官网的:root:root也不行，最后就整了一个js文件在入口统一修改...囧\r\n```JS\r\n  export function updateVantCSSVar() {\r\n    let cssVar = [\r\n      ['--van-tabs-bottom-bar-color', '#FF7500'],\r\n      ['--van-tabs-nav-background', 'transparent'],\r\n      ['--van-field-label-width', '5.5em'],\r\n    ]\r\n\r\n    cssVar.forEach(item => {\r\n      document.documentElement.style.setProperty(item[0], item[1])\r\n    })\r\n  }\r\n```\r\n\r\n顺路又学了一下less定义全局变量\r\n```JS\r\n// VITE.CONFIG.JS\r\nexport default defineConfig(({ mode }) => {\r\n  return {\r\n    css: {\r\n      preprocessorOptions: {\r\n        less: {\r\n          modifyVars: {\r\n            // 这个用来定义全局变量的\r\n            hack: `true; @import \"${path.resolve(__dirname, \"./src/assets/css/base.less\")}\"`\r\n            // '--van-field-label-width': '6.3em'\r\n          },\r\n          globalVars: {\r\n\r\n          },\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n  //base.less\r\n  @test-color: red;\r\n  @goods-img: 60px;\r\n  @yellow: #FF7500;\r\n\r\n```\r\n\r\n最后打包，默认的是`/`,建议配置 `base`为`./`,不然如果项目不是在根目录就找不到静态资源了。\r\n\r\n### 碰到的糟心问题\r\n\r\n  - 白屏\r\n\r\n    如果任何报错都没有,建议检查router的模式是否用的是`history`\r\n  * ts中引入Vue文件报错\r\n\r\n    ```ts\r\n      //增加一个 sfc.d.ts\r\n      declare module '*.vue' {\r\n        import { ComponentOptions } from 'vue'\r\n        const componentOptions: ComponentOptions\r\n        export default componentOptions\r\n      }\r\n    ```\r\n  * vconsole引入\r\n    ```JS\r\n      if (import.meta.env.MODE !== 'prod') {\r\n\r\n        // 网上的教程大多是下面这种引入，实际上会报错\r\n        app.use(new Vconsole())\r\n\r\n        // 以下引入可以正常使用\r\n        new Vconsole()\r\n\r\n        // 这种也可以\r\n        app.use(()=>new Vconsole())\r\n      }\r\n    ```\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n","createTime":1682247359453,"lastUpdateTime":1682247359453},{"id":4,"title":"NextJS打包相关问题","desc":"NextJS打包相关问题以及解决办法，更多参见[Next文档](https://www.nextjs.cn/)","tag":["Next","打包"],"content":"# NextJS打包相关问题\r\n\r\nNextJS打包相关问题以及解决办法，更多参见[Next文档](https://www.nextjs.cn/)\r\n<!-- [Next,打包] -->\r\n\r\n>Eslint、Ts类型校验关闭\r\n```js\r\n  // next.config.js\r\n\r\n  const nextConfig = {\r\n  \r\n    eslint:{\r\n      ignoreDuringBuilds:true\r\n    },\r\n      typescript: {\r\n      // !! WARN !!\r\n      // Dangerously allow production builds to successfully complete even if\r\n      // your project has type errors.\r\n      // !! WARN !!\r\n      ignoreBuildErrors: true,\r\n    }\r\n  }\r\n```\r\n\r\n\r\n\r\n> Image Optimization using Next.js' default loader is not compatible with `next export`.\r\n\r\n```JS\r\nmodule.exports = {\r\n  // https://github.com/vercel/next.js/issues/21079\r\n  // Remove this workaround whenever the issue is fixed\r\n  images: {\r\n    loader: 'imgix',\r\n    path: '',\r\n  },\r\n}\r\n```\r\n\r\n> 图片加载不出来","createTime":1682247359452,"lastUpdateTime":1682247359452},{"id":5,"title":"NextJS打包配置学习","desc":"NextJS打包配置对应字段了解，进行简单的打包测试","tag":["Next","next.config.js"],"content":"# NextJS打包配置学习\r\n\r\nNextJS打包配置对应字段了解，进行简单的打包测试\r\n<!-- [Next,next.config.js] -->\r\n> `assetPrefix` 静态资源前缀\r\n```js\r\n  const nextConfig = {\r\n    assetPrefix:'/前缀'\r\n  }\r\n```\r\n\r\n> `Redirects` 将source原路径重定向到destination新路径，访问的是destination路径;\r\n```JS\r\n// 最终访问的是/blog路径,浏览器显示的也是blog路径\r\nconst nextConfig = {\r\n  redirects() {\r\n    return [\r\n      {\r\n        source: \"/\",\r\n        destination: \"/blog\",\r\n        permanent: true\r\n      }\r\n    ]\r\n  },\r\n}\r\n```\r\n> `Rewrites`  将原路径充当代理以此来屏蔽目标路径。浏览器显示的是destination路径，实际访问的是source路径；功能类似于**userRouter.push(path,as)**中 参数**as**的功能;\r\n```JS\r\n// 浏览器显示的是\"/blog\"，实际访问的是\"/\"路径\r\nconst nextConfig = {\r\n  async rewrites() {\r\n    return [\r\n      {\r\n        source: '/',\r\n        destination: '/blog'\r\n      }\r\n    ]\r\n  },\r\n}\r\n```","createTime":1682247359452,"lastUpdateTime":1682247359452},{"id":6,"title":"React搞笑记录","desc":"记录一些别人或者自己的React搞笑代码","tag":["React","Bug"],"content":"# React搞笑记录\r\n\r\n记录一些别人或者自己的React搞笑代码\r\n\r\n<!-- [React,Bug] -->\r\n```JS\r\n\r\n const downTime = useCallback(\r\n    () => {\r\n      let b = 0\r\n      const Time = setInterval(() => {\r\n        if (b >1) {\r\n          clearInterval(Time)\r\n          return false\r\n        }\r\n        b++\r\n        handleGetVideo()\r\n      }, 2 * 1000 * 60)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleGetVideo = () => {\r\n    getOrderVideo({ transactionId: id }).then(res => {\r\n      if (res && res.code == 200 && res.data) {\r\n        const {status,videoInfos}=res.data\r\n        if(status&&status=='FAILED'){\r\n          // ...\r\n        }else if(status&&status=='SUCCESS'&& videoInfos&&videoInfos.length){\r\n          // ...\r\n        }else if(status&&status=='QUERYING'){\r\n          setawaitState(true)\r\n          downTime()\r\n          setTimeout(() => {\r\n            setawaitState(false)\r\n          }, 2 * 1000 * 60)\r\n        }\r\n        \r\n      }\r\n    })\r\n  }\r\n```","createTime":1682247359452,"lastUpdateTime":1682247359452},{"id":2,"title":"Git Workflow","desc":"解决开发之后需要做的事，打包上线","tag":["Git Workflow"],"content":"# Git Workflow\r\n解决开发之后需要做的事，打包上线\r\n<!-- [Git Workflow] -->\r\n\r\n在项目根目录添加 .github/workflows/integrate.yml\r\n\r\n真的是气死个人，这段yml是cv来的，别人就能正常运行，但是我拿过来就报错。首先就是报错NextJS包里有`appKey??**`,\r\n一开始我看到这个还以为是这个包里有ES6语法，编译出问题。就用babel.config配置去编译node_modules，我也不知道编译对了没有总之没有生效，想来是错了\r\n后来我用windows的node环境试了一下这个语法发现node是可以用的，于是我猜测会不会是workflows的node版本过低，升级了版本就好了。。。。\r\n\r\n```yml\r\nname: Build and Deploy\r\non: \r\n  push:\r\n    branches:\r\n      - blog-next\r\njobs:\r\n  build-and-deploy:\r\n    # 虚拟机环境 ubuntu-latest，ubuntu-18.04或ubuntu-16.04\r\n    # windows-latest，windows-2019或windows-2016\r\n    # macOS-latest或macOS-10.14\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v2.3.1\r\n        with:\r\n          persist-credentials: false\r\n\r\n      - name: Cache\r\n        uses: actions/cache@v2\r\n        with:\r\n          path: ${{ github.workspace }}/.next/cache\r\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}\r\n\r\n      - name: Install and Build\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: 16\r\n      - run: npm install\r\n      - run: npm run transMD\r\n      - run: npm run build\r\n      - run: npm run export\r\n        env:\r\n            CI: true\r\n      - run: touch out/.nojekyll\r\n\r\n      - name: Deploy\r\n        uses: JamesIves/github-pages-deploy-action@3.7.1\r\n        with:\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n          BRANCH: lj-pages\r\n          FOLDER: out # The folder the action should deploy.\r\n          CLEAN: true # Automatically remove deleted files from the deploy branch\r\n```","createTime":1682247359451,"lastUpdateTime":1682247359451},{"id":3,"title":"Git常用操作","desc":"git常用命令记录，主要是容易忘","tag":["git"],"content":"# Git常用操作\r\n\r\ngit常用命令记录，主要是容易忘\r\n\r\n<!-- [git] -->\r\n\r\n>`git pull -f origin master:master`\r\n  如果远程分支和本地分支代码相差太大，可以考虑用远程的覆盖本地代码","createTime":1682247359451,"lastUpdateTime":1682247359451},{"id":1,"title":"CORS policy","desc":"Access to XMLHttpRequest at '\\*\\*' from origin '\\*\\*' has been blocked by CORS policy: The request client is not a secure context and the resource is in more-private address space \\`private`.","tag":["CORS-Policy","Chrome"],"content":"# CORS policy\r\n\r\nAccess to XMLHttpRequest at '\\*\\*' from origin '\\*\\*' has been blocked by CORS policy: The request client is not a secure context and the resource is in more-private address space \\`private`.\r\n\r\n<!-- [CORS-Policy,Chrome] -->\r\n\r\n\r\n![The request client is not a secure context and the resource is in more-private address space 'private'](/md-images/pna.jpg)\r\n\r\n\r\n## 原因\r\n  与第三方相关。访问私有IP地址时，Chrome 会请求安全连接。Chrome 将弃用从非安全网站访问专用网络端点访问（以前称为 CORS-RFC1918）规范的一部分\r\n\r\n\r\n- [What is Private Network Access](https://developer.chrome.com/blog/private-network-access-update/#what-is-private-network-access)\r\n- [Chrome's plans to enable CORS-RFC1918](https://developer.chrome.com/articles/cors-rfc1918-feedback/#chrome's-plans-to-enable-cors-rfc1918)\r\n\r\n## 解决方法\r\n\r\n  前端接口和后端接口统一都用`https`\r\n\r\n\r\n### 什么是IP\r\n\r\n  在网络中，每台计算机都有一个唯一的地址，方便别人找到它，这个地址称为IP地址。IP地址是一个网络编码，用来确定网络中的一个节点，是由`32位的二进制`组成\r\n\r\n### IP地址的组成 \r\n\r\n  IP地址由`网络部分`和`主机部分`两部分组成\r\n  网络部分标示不同的网络\r\n  主机部分标示在一个网络中特定的主机\r\n\r\n### IP分类\r\n\r\n  IP地址的网络部分是由internet地址分配机构来统一分配的，这样可以保证IP的唯一性\r\n  IP地址中全为1的IP即255.255.255.255 它标示限制广播地址，如果将其作为数据包的目标地址可以理解为发送到所有网络的所有主机\r\n  IP地址全为0的IP即0.0.0.0 表示启动时的IP地址 含义尚未未分配的IP地址\r\n  127是用来进行本机测试的，除了127.255.255.255外，其他的`127开头的地址都代表本机`\r\n\r\n### 公有IP和私有IP\r\n私有IP\r\n  - A类 1-126 每个网络中可以有2的24次方-2台的主机\r\n  - B类 128-191 最大的主机数为 2的16次方减2\r\n  - C类 192-223 最大的主机数量是2的8次方减2\r\n\r\n其他范围的IP均为公有IP地址\r\n\r\n### 区别\r\n  公有IP地址：\r\n\r\n  组建一个企业级网络，需要去向“电信运营商ISP”申请一个接入Internet的宽带，同时ISP还会给我们分配一个或多个IP地址，这些IP地址可以供我们企业内部上网，这些ISP分配给我们的IP，就是公有IP。\r\n\r\n  公有地址（Public address，也可称为公网地址）由Internet NIC（Internet Network Information Center因特网信息中心）负责。这些IP地址分配给注册并向Internet NIC提出申请的组织机构。通过它直接访问因特网，它是广域网范畴内的。\r\n\r\n  私有IP地址：\r\n\r\n  我们企业或家庭内部组建局域网用的IP，一般都会用私有IP。\r\n  私有地址（Private address，也可称为专网地址）属于非注册地址，专门为组织机构内部使用，它是局域网范畴内的，私有IP禁止出现在Internet中，在ISP连接用户的地方，将来自于私有IP的流量全部都会阻止并丢掉。\r\n  《如果在企业内部的电脑要访问Internet，则需要在企业边界上用“NAT技术”将私网IP转成公网IP才能正常的上网。》\r\n","createTime":1682247359450,"lastUpdateTime":1682247359450}]}))